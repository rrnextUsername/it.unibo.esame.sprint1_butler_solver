/* Generated by AN DISI Unibo */ 
package it.unibo.butler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Butler ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('butlerModel.pl')","") //set resVar	
						solve("consult('test.pl')","") //set resVar	
						solve("showResourceModel","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						itunibo.butler.butlerResourceModelSupport.updateModelState(myself ,"waitCmd" )
						solve("showResourceModel","") //set resVar	
					}
					 transition(edgeName="t00",targetState="solveCmd",cond=whenDispatch("cmd"))
				}	 
				state("solveCmd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cmd(CMD)"), Term.createTerm("cmd(CMD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								itunibo.butler.butlerResourceModelSupport.updateModelState(myself ,"solveCmd" )
								solve("comando(${payloadArg(0)})","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="solveAction", cond=doswitch() )
				}	 
				state("solveAction") { //this:State
					action { //it:State
						itunibo.butler.butlerResourceModelSupport.updateModelState(myself ,"solveAction" )
						solve("retract(azione(ARG0,ARG1,ARG2,ARG3))","") //set resVar	
						if(currentSolution.isSuccess()){ val Azione= currentSolution.getVarValue("ARG0").toString()
						if(Azione=="check"){ val Number= currentSolution.getVarValue("ARG1").toString()
						forward("check", "check($Number)" ,"butler" ) 
						 }
						if(Azione=="wait"){ val Time= currentSolution.getVarValue("ARG1").toString()
						forward("wait", "wait($Time)" ,"butler" ) 
						 }
						 }
						else
						 { forward("done", "done" ,"butler" ) 
						  }
					}
					 transition(edgeName="t01",targetState="azioneCheck",cond=whenDispatch("check"))
					transition(edgeName="t02",targetState="azioneWait",cond=whenDispatch("wait"))
					transition(edgeName="t03",targetState="waitCmd",cond=whenDispatch("done"))
					transition(edgeName="t04",targetState="stoppedSolvedAction",cond=whenEvent("stopAppl"))
				}	 
				state("stoppedSolvedAction") { //this:State
					action { //it:State
						itunibo.butler.butlerResourceModelSupport.updateModelState(myself ,"stoppedSolvedAction" )
						println("$name in ${currentState.stateName} | $currentMsg")
						solve("showResourceModel","") //set resVar	
					}
					 transition(edgeName="t05",targetState="restartSolvedAction",cond=whenEvent("reactivateAppl"))
				}	 
				state("restartSolvedAction") { //this:State
					action { //it:State
						solve("assert(done(restartSolvedAction))","") //set resVar	
						println("$name in ${currentState.stateName} | $currentMsg")
						solve("showResourceModel","") //set resVar	
					}
					 transition(edgeName="t06",targetState="azioneCheck",cond=whenDispatch("check"))
					transition(edgeName="t07",targetState="azioneWait",cond=whenDispatch("wait"))
					transition(edgeName="t08",targetState="waitCmd",cond=whenDispatch("done"))
					transition(edgeName="t09",targetState="stoppedSolvedAction",cond=whenEvent("stopAppl"))
				}	 
				state("azioneCheck") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("check(NUMBER)"), Term.createTerm("check(NUMBER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.butler.butlerResourceModelSupport.updateModelState(myself ,"azioneCheck" )
								solve("showResourceModel","") //set resVar	
								solve("assert(done(check,${payloadArg(0)}))","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="solveAction", cond=doswitch() )
				}	 
				state("azioneWait") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("wait(TIME)"), Term.createTerm("wait(TIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.butler.butlerResourceModelSupport.updateModelState(myself ,"azioneWait" )
								solve("showResourceModel","") //set resVar	
								solve("assert(done(wait,${payloadArg(0)}))","") //set resVar	
						}
						stateTimer = TimerActor("timer_azioneWait", 
							scope, context!!, "local_tout_butler_azioneWait", 2000.toLong() )
					}
					 transition(edgeName="t010",targetState="solveAction",cond=whenTimeout("local_tout_butler_azioneWait"))   
				}	 
			}
		}
}
